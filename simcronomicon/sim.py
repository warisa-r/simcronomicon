from . import nx
from . import rd

class DayEvent():
    def __init__(self, day_freq, max_distance=float('inf')):
        self.day_freq = day_freq
        self.max_distance = max_distance
    def happen(self, person, sim):
        town = sim.town
        people = sim.people
        address = person.address
        if self.max_distance == float('inf'):
            # All other nodes in the graph
            neighbors = [node for node in town.nodes if node != address]
        else:
            # BFS: only nodes within `max_distance` hops
            lengths = nx.single_source_shortest_path_length(town, source=address, cutoff=self.max_distance)
            neighbors = [node for node in lengths if node != address]

        for _ in range(self.day_freq):
            if person.social_energy > 0:
                if neighbors:
                    chosen_address = rd.choice(neighbors)
                    people_at_address = [p for p in people if p.address == chosen_address]
                    if len(people_at_address) > 1:
                        chosen_person = rd.choice(people_at_address)
                    else:
                        chosen_person = people_at_address[0]
                    if chosen_person.social_energy > 0:
                        # Interaction is a two-way street!
                        person.interact(chosen_person, sim.counter_t, sim.params)
                        chosen_person.interact(person, sim.counter_t, sim.params)



class SimulationParameters():
    def __init__(self, gamma, alpha, lam, phi, theta, mu, eta1, eta2, mem_span = 10):
        # Use the same parameter sets as the model notation but precalculate the conversion rate
        # since these are the same through out the simulation

        # Check if we have the right input type
        for name, value in zip(
            ['gamma', 'alpha', 'lam', 'phi', 'theta', 'mu', 'eta1', 'eta2'],
            [gamma, alpha, lam, phi, theta, mu, eta1, eta2]
        ):
            if not isinstance(value, (float, int)):
                raise TypeError(f"{name} must be a float or int, got {type(value).__name__}")
        
        # Cast to float
        gamma, alpha, lam, phi, theta, mu, eta1, eta2 = map(float, [gamma, alpha, lam, phi, theta, mu, eta1, eta2])

        if not isinstance(mem_span, int) or mem_span <= 1:
            raise ValueError(f"mem_span must be an integer greater than 1, got {mem_span}")

        # We use number 2 to signify transition that happens because of interaction
        gamma_alpha_lam = gamma * alpha * lam
        self.Is2E = (1-gamma) * gamma_alpha_lam
        self.Is2S = gamma_alpha_lam * mu
        self.Ir2S = gamma_alpha_lam
        self.E2S = theta
        self.E2R = phi
        self.S2R = eta1
        self.forget = eta2

class Simulation:
    def __init__(self, town, params):
        if not isinstance(town, nx.classes.graph.Graph):
            raise TypeError("The input of the town and parameter must be an undirected graph generated by networkx!")
        if not isinstance(params, SimulationParameters):
            raise TypeError("Please defined parameters using SimulationParameters!")